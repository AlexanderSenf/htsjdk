buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.palantir.git-version' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'com.github.spotbugs' version '1.6.9'
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true // codecov depends on xml format report
        html.enabled = true
    }
}

dependencies {
    compile "org.apache.commons:commons-jexl:2.1.1"
    compile "commons-logging:commons-logging:1.1.1"
    compile "org.xerial.snappy:snappy-java:1.1.4"
    compile "org.apache.commons:commons-compress:1.4.1"
    compile "org.tukaani:xz:1.5"
    compile "gov.nih.nlm.ncbi:ngs-java:2.9.0"

    testCompile "org.testng:testng:6.14.3"
    testCompile "com.google.jimfs:jimfs:1.1"
    testCompile "com.google.guava:guava:26.0-jre"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

final isRelease = Boolean.getBoolean("release")
final gitVersion = gitVersion().replaceAll(".dirty", "")
version = isRelease ? gitVersion : gitVersion + "-SNAPSHOT"

logger.info("build for version:" + version)
group = 'com.github.samtools'

defaultTasks 'jar'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
}

jar {
    manifest {
        attributes 'Implementation-Title': 'HTSJDK',
                'Implementation-Vendor': 'Samtools Organization',
                'Implementation-Version': version
    }
}

import org.gradle.internal.os.OperatingSystem;

tasks.withType(Test) {
    outputs.upToDateWhen { false } // tests will always rerun
    useTestNG()

    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "2G"

    jvmArgs '-Djava.awt.headless=true'  //this prevents awt from displaying a java icon while the tests are running

    if (System.env.CI == "true") {  //if running under a CI output less into the logs
        int count = 0

        beforeTest { descriptor ->
            count++
            if( count % 100 == 0) {
                logger.lifecycle("Finished "+ Integer.toString(count++) + " tests")
            }
        }
    } else {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true
        beforeTest { descriptor ->
            logger.lifecycle("Running Test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

test {
    description = "Runs the unit tests other than the SRA tests"

    useTestNG {
        if( OperatingSystem.current().isUnix() ){
            excludeGroups "slow", "broken", "sra", "defaultReference", "ftp", "http", "ena"
        } else {
            excludeGroups "slow", "broken", "unix", "sra", "defaultReference", "ftp", "http", "ena"
        }
    }
}

task testSRA(type: Test) {
    jvmArgs '-Dsamjdk.sra_libraries_download=true'

    description "Run the SRA tests"
    useTestNG {
        configFailurePolicy 'continue'
        includeGroups "sra"
    }
}

//task testWithDefaultReference(type: Test) {
//    description = "Run tests with a default reference File"
//    jvmArgs += '-Dsamjdk.reference_fasta=src/test/resources/htsjdk/samtools/cram/ce.fa'
//
//    tags {
//        include "defaultReference"
//    }
//}
//
//task testFTP(type: Test) {
//    description = "Runs the tests that require connection to a remote ftp server"
//    tags {
//        include "ftp"
//        exclude "slow"
//        exclude "broken"
//    }
//}
//
//task testExternalApis(type: Test) {
//    description = "Run the SRA, ENA, and HTTP tests (tests that interact with external APIs)"
//    jvmArgs += '-Dsamjdk.sra_libraries_download=true'
//
//    tags {
//        include "sra"
//        include "http"
//        include "ena"
//        exclude "slow"
//        exclude "broken"
//    }
//}

wrapper {
    gradleVersion = '5.2.1'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

spotbugs {
    reportLevel = 'high'
    excludeFilter = file('gradle/spotbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

publishing {
    publications {
        htsjdk(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'HTSJDK'
                packaging = 'jar'
                description = 'A Java API for high-throughput sequencing data (HTS) formats'
                url = 'https://samtools.github.io/htsjdk/'

                developers {
                    developer {
                        id = 'htsjdk'
                        name = 'Htsjdk Team'
                        url = 'https://github.com/samtools/htsjdk'
                    }
                }

                scm {
                    url = 'git@github.com:samtools/htsjdk.git'
                    connection = 'scm:git:git@github.com:samtools/htsjdk.git'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = isRelease ? project.findProperty("sonatypeUsername") : System.env.ARTIFACTORY_USERNAME
                password = isRelease ? project.findProperty("sonatypePassword") : System.env.ARTIFACTORY_PASSWORD
            }
            def release = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshot = "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/"
            url = isRelease ? release : snapshot
        }
    }
}

/**
 * Sign non-snapshot releases with our secret key.  This should never need to be invoked directly.
 */
signing {
    required { isRelease && gradle.taskGraph.hasTask("publishHtsjdkPublicationToMavenRepository") }
    sign publishing.publications.htsjdk
}
gradle.taskGraph.beforeTask { Task task ->
    println "executing $task ..."
}

task install(dependsOn:publishToMavenLocal)
